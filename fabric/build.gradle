plugins {}

dependencies {
  minecraft "com.mojang:minecraft:${minecraft_version}"
  mappings loom.officialMojangMappings()
  modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
  modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
  compileOnly project(":common")
  api "com.electronwill.night-config:core:${nightconfig_version}"
  api "com.electronwill.night-config:toml:${nightconfig_version}"
  modCompileOnly "net.minecraftforge:forgeconfigapiport-fabric:${fcap_version}"
  include(implementation(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-fabric:0.2.0-beta.4")))
}

loom {
  if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
    accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
  }
  mixin {
    defaultRefmapName.set("${mod_id}.refmap.json")
  }
  runs {
    client {
      client()
      setConfigName("Fabric Client")
      ideConfigGenerated(true)
      runDir("run")
    }
    server {
      server()
      setConfigName("Fabric Server")
      ideConfigGenerated(true)
      runDir("run")
    }
  }
}

tasks.withType(JavaCompile).configureEach {
  source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
  source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
  from(project(":common").sourceSets.main.allSource)
}

processResources {
  from project(":common").sourceSets.main.resources
}
