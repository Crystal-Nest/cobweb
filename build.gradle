plugins {
  id "org.sonarqube" version "4.4.1.3373"
  id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
  id "com.modrinth.minotaur" version "2.+" apply false
  id "me.hypherionmc.cursegradle" version "2.0.1" apply false
  id "com.github.breadmoirai.github-release" version "2.5.+" apply false
}

sonar {
  properties {
    property "sonar.projectKey", "Crystal-Nest_${mod_id_kebab}"
    property "sonar.organization", "crystal-nest"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

subprojects { subproject ->
  apply plugin: "java"
  apply plugin: "com.modrinth.minotaur"
  apply plugin: "me.hypherionmc.cursegradle"
  apply plugin: "com.github.breadmoirai.github-release"
  apply plugin: "maven-publish"

  java.toolchain.languageVersion = JavaLanguageVersion.of(17)
  java.withSourcesJar()
  java.withJavadocJar()

  jar {
    from(rootProject.file("LICENSE")) {
      rename { "${it}_${mod_title}" }
    }
    manifest {
      attributes([
        'Specification-Title'     : mod_title,
        'Specification-Vendor'    : mod_authors,
        'Specification-Version'   : "${minecraft_version}-${mod_version}",
        'Implementation-Title'    : mod_title,
        'Implementation-Vendor'   : mod_authors,
        'Implementation-Version'  : "${minecraft_version}-${mod_version}",
        "Implementation-URL"      : "https://github.com/${github_user}/${mod_id_kebab}/tree/${minecraft_version}",
        'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        'Timestamp'               : System.currentTimeMillis(),
        'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
        'Built-On-Minecraft'      : minecraft_version
      ])
    }
  }

  sourcesJar {
    from(rootProject.file("LICENSE")) {
      rename { "${it}_${mod_title}" }
    }
  }

  repositories {
    mavenCentral()
    maven {
      name = "Sponge / Mixin"
      url = "https://repo.spongepowered.org/repository/maven-public/"
    }
    maven {
      name = "Crystal Nest"
      url = "https://maven.crystalnest.it"
    }
  }

  tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.getRelease().set(17)
  }

  processResources {
    def expandProps = [
      "mod_version"                  : mod_version,
      "group"                        : project.group,
      "mod_authors"                  : mod_authors,
      "mod_title"                    : mod_title,
      "mod_id"                       : mod_id,
      "mod_id_kebab"                 : mod_id_kebab,
      "license"                      : license,
      "description"                  : description,
      "credits"                      : credits,
      "github_user"                  : github_user,
      "curseforge_id"                : curseforge_id,
      "minecraft_version"            : minecraft_version,
      "minecraft_version_range"      : minecraft_version_range,
      "fabric_version"               : fabric_version,
      "fabric_loader_version"        : fabric_loader_version,
      "forge_version"                : forge_version,
      "forge_loader_version_range"   : forge_loader_version_range,
    ]

    filesMatching(["pack.mcmeta", "fabric.mod.json", "META-INF/mods.toml", "*.mixins.json"]) {
      expand expandProps
    }
    inputs.properties(expandProps)
  }

  tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
  }

  def changelog_body = "See [Changelog](https://github.com/${github_user}/${mod_id_kebab}/blob/master/CHANGELOG.md#${minecraft_version.replaceAll('\\.', '')}-${mod_version.replaceAll('\\.', '')}---${new Date().format("yyyyMMdd")})."
  def version_type = mod_version.replaceFirst("([0-9]+\\.?){4}-?", "") ?: "release"
  def loader = "Common"
  switch (subproject.name) {
    case "fabric":
      loader = "Fabric"
      break
    case "forge":
      loader = "Forge"
      break
  }
  def noPublish = loader == "Common"

  publishing {
    repositories {
      maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/${github_user}/${mod_id_kebab}")
        credentials {
          username = github_user
          password = System.getenv("GITHUB_TOKEN") ?: ""
        }
      }
    }
    publications {
      gpr(MavenPublication) {
        groupId = project.group
        artifactId = "${mod_id_kebab}-${loader.toLowerCase()}"
        version = "${minecraft_version}-${mod_version}"
        from components.java
        pom {
          name = "[${loader} - ${minecraft_version}] ${mod_title} v${mod_version}"
          description = "${description}"
          url = "https://github.com/${github_user}/${mod_id_kebab}/tree/${minecraft_version}"
          issueManagement {
            system = "github"
            url = "https://github.com/${github_user}/${mod_id_kebab}/issues"
          }
          licenses {
            license {
              name = license
              url = "https://spdx.org/licenses/${license}.html"
            }
          }
          developers {
            mod_authors.split(", ").each { author ->
              developer {
                id = author.toLowerCase()
                name = author
              }
            }
          }
        }
      }
    }
  }

  githubRelease {
    token = System.getenv("GITHUB_TOKEN") ?: ""
    owner = github_user
    repo = mod_id_kebab
    tagName = "v${minecraft_version}-${mod_version}"
    targetCommitish = minecraft_version
    releaseName = "v${minecraft_version}-${mod_version}"
    generateReleaseNotes = false
    body = changelog_body
    draft = false
    prerelease = version_type != "release"
    releaseAssets jar
    allowUploadToExisting = true
    overwrite = false
    dryRun = noPublish
  }

  modrinth {
    token = System.getenv("MODRINTH_TOKEN") ?: ""
    projectId = mod_id_kebab
    versionNumber = mod_version
    versionName = "[${loader} - ${minecraft_version}] ${mod_title} v${mod_version}"
    changelog = changelog_body
    uploadFile = jar
    versionType = version_type
    gameVersions = [minecraft_version]
    loaders = [loader.toLowerCase()]
    dependencies {
      switch (loader) {
        case "Fabric":
          required.project "fabric-api"
          break
        case "Forge":
          break
        case "NeoForge":
          break
      }
    }
    debugMode = noPublish
  }

  curseforge {
    apiKey = System.getenv("CURSEFORGE_TOKEN") ?: ""
    project {
      id = curseforge_id
      changelogType = "markdown"
      changelog = changelog_body
      releaseType = version_type
      if (!noPublish) {
        addGameVersion loader
      }
      addGameVersion minecraft_version
      mainArtifact(jar) {
        displayName = "[${loader} - ${minecraft_version}] ${mod_title} v${mod_version}"
      }
      relations {
        switch (loader) {
          case "Fabric":
            break
          case "Forge":
            break
          case "NeoForge":
            break
        }
      }
    }
    options {
      debug = noPublish
      detectNewerJava = true
      forgeGradleIntegration = false
      fabricIntegration = loader == "Fabric"
      detectFabricApi = loader == "Fabric"
    }
  }

  tasks.register("publishLoader") {
    group = "publishing"
    description = "Publish ${loader} specific versions to all platforms"
    dependsOn "publish"
    dependsOn "githubRelease"
    dependsOn "curseforge"
    dependsOn "modrinth"
  }
}

tasks.register("publishAll") {
  group = "publishing"
  description = "Publish all loader specific versions to all platforms"
  dependsOn subprojects.publishLoader
}
