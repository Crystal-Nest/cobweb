plugins {
  id "org.sonarqube" version "4.4.1.3373"
  // Required for NeoGradle
  id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
  id "com.modrinth.minotaur" version "2.+" apply false
  id "me.hypherionmc.cursegradle" version "2.0.1" apply false
  id "com.github.breadmoirai.github-release" version "2.5.+" apply false
  // Required for Fabric
  id "fabric-loom" version "1.5-SNAPSHOT" apply false
}

sonar {
  properties {
    property "sonar.projectKey", "Crystal-Nest_${mod_id_kebab}"
    property "sonar.organization", "crystal-nest"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.qualitygate.wait", "true"
  }
}

subprojects { subproject ->
  def noPublish = subproject.name === "common"
  def isFabric = subproject.name == "fabric"

  apply plugin: "java"
  apply plugin: "idea"
  apply plugin: "com.modrinth.minotaur"
  apply plugin: "me.hypherionmc.cursegradle"
  apply plugin: "com.github.breadmoirai.github-release"
  apply plugin: "maven-publish"
  if (isFabric) {
    apply plugin: "fabric-loom"
  }

  java.toolchain.languageVersion = JavaLanguageVersion.of(17)
  java.withSourcesJar()
  java.withJavadocJar()

  archivesBaseName = "${mod_id_kebab}-${subproject.name}"
  version = "${minecraft_version}-${mod_version}"

  jar {
    from(rootProject.file("LICENSE")) {
      rename { "${it}_${mod_title}" }
    }
    manifest {
      attributes([
        "Specification-Title"     : mod_title,
        "Specification-Vendor"    : mod_authors,
        "Specification-Version"   : project.version,
        "Implementation-Title"    : mod_title,
        "Implementation-Vendor"   : mod_authors,
        "Implementation-Version"  : project.version,
        "Implementation-URL"      : "https://github.com/${github_user}/${mod_id_kebab}/tree/${minecraft_version}",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        "Timestamp"               : System.currentTimeMillis(),
        "Built-On-Java"           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
        "Built-On-Minecraft"      : minecraft_version
      ])
    }
  }

  sourcesJar {
    from(rootProject.file("LICENSE")) {
      rename { "${it}_${mod_title}" }
    }
  }

  repositories {
    mavenCentral()
    maven {
      name = "Sponge / Mixin"
      url = "https://repo.spongepowered.org/repository/maven-public/"
    }
    maven {
      name = "Crystal Nest"
      url = "https://maven.crystalnest.it"
    }
    maven {
      name = "Fuzs Mod Resources"
      url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }
  }

  tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.getRelease().set(17)
  }

  processResources {
    def expandProps = [
      "mod_version"               : mod_version,
      "group"                     : project.group,
      "mod_authors"               : mod_authors,
      "mod_title"                 : mod_title,
      "mod_id"                    : mod_id,
      "mod_id_kebab"              : mod_id_kebab,
      "license"                   : license,
      "description"               : project.description,
      "credits"                   : credits,
      "github_user"               : github_user,
      "curseforge_id"             : curseforge_id,
      "minecraft_version"         : minecraft_version,
      "minecraft_version_range"   : minecraft_version_range,
      "fabric_version"            : fabric_version,
      "fabric_loader_version"     : fabric_loader_version,
      "forge_version"             : forge_version,
      "forge_loader_version_range": forge_loader_version_range,
      "neoforge_version"          : neoforge_version,
      "neoforge_loader_version_range": neoforge_loader_version_range,
      "fcap_version"              : fcap_version,
    ]

    filesMatching(["pack.mcmeta", "fabric.mod.json", "META-INF/mods.toml", "*.mixins.json"]) {
      expand expandProps
    }
    inputs.properties(expandProps)
  }

  tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
  }

  def changelog_body = "See [Changelog](https://github.com/${github_user}/${mod_id_kebab}/blob/master/CHANGELOG.md#${minecraft_version.replaceAll('\\.', '')}-${mod_version.replaceAll('\\.', '')}---${new Date().format("yyyyMMdd")})."
  def version_type = mod_version.replaceFirst("([0-9]+\\.?){4}-?", "") ?: "release"
  def loader = "Common"
  switch (subproject.name) {
    case "fabric":
      loader = "Fabric"
      break
    case "forge":
      loader = "Forge"
      break
    case "neoforge":
      loader = "NeoForge"
      break
  }

  publishing {
    repositories {
      maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/${github_user}/${mod_id_kebab}")
        credentials {
          username = github_user
          password = System.getenv("GITHUB_TOKEN") ?: ""
        }
      }
    }
    publications {
      gpr(MavenPublication) {
        groupId = project.group
        artifactId = "${mod_id_kebab}-${subproject.name}"
        version = project.version
        from components.java
        pom {
          name = "[${loader} - ${minecraft_version}] ${mod_title} v${mod_version}"
          description = "${description}"
          url = "https://github.com/${github_user}/${mod_id_kebab}/tree/${minecraft_version}"
          issueManagement {
            system = "github"
            url = "https://github.com/${github_user}/${mod_id_kebab}/issues"
          }
          licenses {
            license {
              name = license
              url = "https://spdx.org/licenses/${license}.html"
            }
          }
          developers {
            mod_authors.split(", ").each { author ->
              developer {
                id = author.toLowerCase()
                name = author
              }
            }
          }
        }
      }
    }
  }

  githubRelease {
    token = System.getenv("GITHUB_TOKEN") ?: ""
    owner = github_user
    repo = mod_id_kebab
    tagName = "v${project.version}"
    targetCommitish = minecraft_version
    releaseName = "v${project.version}"
    generateReleaseNotes = false
    body = changelog_body
    draft = false
    prerelease = version_type != "release"
    releaseAssets = isFabric ? remapJar : jar
    allowUploadToExisting = true
    overwrite = false
    dryRun = noPublish
  }

  modrinth {
    token = System.getenv("MODRINTH_TOKEN") ?: ""
    projectId = mod_id_kebab
    versionNumber = mod_version
    versionName = "[${loader} - ${minecraft_version}] ${mod_title} v${mod_version}"
    changelog = changelog_body
    uploadFile = isFabric ? remapJar : jar
    versionType = version_type
    gameVersions = [minecraft_version]
    loaders = [loader.toLowerCase()]
    dependencies {
      switch (loader) {
        case "Fabric":
          required.project "fabric-api"
          optional.project "forge-config-api-port"
          optional.project "forge-config-screens"
          optional.project "modmenu"
          break
        case "Forge":
          optional.project "forge-config-api-port"
          optional.project "forge-config-screens"
          break
        case "NeoForge":
          optional.project "forge-config-api-port"
          optional.project "forge-config-screens"
          break
      }
    }
    debugMode = noPublish
  }

  curseforge {
    apiKey = System.getenv("CURSEFORGE_TOKEN") ?: ""
    project {
      id = curseforge_id
      changelogType = "markdown"
      changelog = changelog_body
      releaseType = version_type
      if (!noPublish) {
        addGameVersion loader
      }
      addGameVersion minecraft_version
      mainArtifact(isFabric ? remapJar : jar) {
        displayName = "[${loader} - ${minecraft_version}] ${mod_title} v${mod_version}"
      }
      relations {
        switch (loader) {
          case "Fabric":
            optionalDependency "forge-config-api-port-fabric"
            optionalDependency "config-menus-forge"
            optionalDependency "modmenu"
            break
          case "Forge":
            optionalDependency "forge-config-api-port-fabric"
            optionalDependency "config-menus-forge"
            break
          case "NeoForge":
            optionalDependency "forge-config-api-port-fabric"
            optionalDependency "config-menus-forge"
            break
        }
      }
    }
    options {
      debug = noPublish
      detectNewerJava = true
      forgeGradleIntegration = false
      fabricIntegration = isFabric
      detectFabricApi = isFabric
    }
  }

  tasks.register("publishLoader") {
    group = "publishing"
    description = "Publish ${loader} specific versions to all platforms"
    dependsOn "publish"
    dependsOn "githubRelease"
    dependsOn "curseforge"
    dependsOn "modrinth"
  }
}

tasks.register("publishAll") {
  group = "publishing"
  description = "Publish all loader specific versions to all platforms"
  dependsOn subprojects.publishLoader
}
